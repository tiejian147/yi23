/**
 * 多态练习题
 *      编写程序模拟”主人“ 喂养 ”宠物“的场景
 *      提示1：
 *          主人类：Master
 *          宠物类：Pet
 *          宠物类子类：Dog、Cat、YingWu
 *      提示2：
 *          主人应该有喂养的方法：feed()
 *          宠物应该有吃的方法：eat()
 *          只要主人喂宠物，宠物就吃。
 * 
 *      要求：主人类中只提供一个喂养方法feed(),要求达到可以喂养各种类型的宠物。
 * 
 *  编写测试程序：
 *      创建主人对象
 *      创建各种宠物对象
 *      调用主人的喂养方法feed()  喂养不同的宠物，观察执行结果
 *      
 *  通过该案例，理解多态在开发中的作用。
 *  重要提示：feed方法是否需要一个参数，参数选什么类型？
 */
//定义主人类
public class Master{
    public static void main(String[] args){
        //创建主人对象
        Master m1 = new Master();

        //创建宠物对象
        Pet p1 = new Dog();
        Pet p2 = new Cat();

        Pet p = new Pet();



        m1.feed(p);//宠物在吃饭
        m1.feed(p1);//狗狗摇尾巴吃饭
        m1.feed(p2);//小猫咪安静的吃饭
        
    }
    //主人喂食的方法
    public void feed(Pet i){
        i.eat();
    }

}

//定义宠物类  父类
class Pet{
    //定义宠物吃的方法
    public void eat(){
        System.out.println("宠物在吃饭");
    }
}

//定义宠物子类--狗
class Dog extends Pet{
    //重写吃的方法
    public void eat(){
        System.out.println("狗狗摇尾巴吃饭");
    }
}

//定义宠物子类--猫
class Cat extends Pet{
    //重写吃的方法
    public void eat(){
        System.out.println("小猫咪安静的吃饭");
    }
}

/**
 * 在不使用多态机制的前提下，目前我们只能再Master类中添加一个新的方法。
 * 
 * 思考：
 *      软件在扩展新需求过程当中，修改Master这个类有什么问题？
 *      一定要记住：软件在扩展过程当中，修改的越少越好。
 *      修改的越多，你的系统当前的稳定性就越差，未知的风险就越多。
 * 
 *      其实这里涉及到一个软件的开发原则：
 *          软件开发原则有七大原则（不属于java，这个开发原则属于整个软件行业）：
 *              其中有一条最基本的原则：OCP(开闭原则)
 * 
 *      什么是开闭原则：
 *          对扩展开放，对修改关闭。
 *          在软件的扩展过程中，修改的越少越好。
 * 
 *      高级程序员开发项目不是仅仅为了实现客户的需求，还需要考虑软件的扩展性。
 * 
 *      面向父类型变成，面向更加抽象进行变成，不建议面向具体编程。
 *      因为面向具体变成会让软件的扩展力变差。
 */