一、工具简介：
    1、多线程框架--支持多并发操作；
    2、用于对服务器模拟负载；
    3、支持web、数据库、FTP服务器系统的性能测试；
    4、开源，纯JAVA，可二次定制化开发；

二、当前使用版本号：5.1来进行操作学习；
    1、语言设置：
    bin目录下，有个jmeter.properties：
    /*
    #Preferred GUI language. Comment out to use the JVM default locale's language.
    language=zh_CN--------这一行 取消注释，然后将en 改为zh_CN


    # Additional locale(s) to add to the displayed list.
    # The current default list is: en, fr, de, no, es, tr, ja, zh_CN, zh_TW, pl, pt_BR
    # [see JMeterMenuBar#makeLanguageMenu()]
    */
    保存之后，重新打开jmeter就可以了；

    2、设置jmeter占用内存大小的配置；
    还是在bin目录下，打开jmeter.bat文件：
    150行：
    if not defined HEAP (
        rem See the unix startup file for the rationale of the following parameters,
        rem including some tuning recommendations
        set HEAP=-Xms1g -Xmx1g -XX:MaxMetaspaceSize=256m
    )

    修改：-Xmx1g  一般可以修改你使用服务器机器内存的80%

    3、GUI模式（带操作界面）下，执行jmeter脚本，只需要将脚本拖拽到窗口内就可以了；
        非GUI，在Lunix系统中，进入到jmeter的bin目录下，将测试脚本放到bin目录，然后执行命令：
        ./jmemter -n -t test.jmx

    4、线程组元件：测试计划要先保存，不要保存在默认的bin目录中，要保存到其他目录，不然删掉这个jmeter会酿成大祸，
    右键测试计划，线程组，可以添加线程组；
    勾选：独立运行每个线程组，勾选的话，会按照线程组的顺序跑先后；
        如果不勾选，没有先后顺序，会同时跑所有的现成；

    5、线程组操作禁用就不跑了，不用删除；

    6、线程组：setUp永远是在第一个线程组来执行；tearDown永远是在最后一个线程组执行；无论中间或者后面有几个普通的线程组，setUp和tearDown
      这两个线程组的顺序是永远不变的；

三、jmeter主要元件使用：
    1、配置元件；
        1.1、http请求默认值；
            *该组件可以为我们的http请求设置默认的值；
            *创建一个测试计划有很多个请求且都是发送到相同的server，只需要添加一个http request defaults
             组件，并设置“server name or IP”
            *添加多个http请求会默认使用http request defaults组件设置的值；

        1.2、http消息头管理器；
        1.3、http cookies管理器；
        1.4、http cache管理器；

    2、监听器元件；
        1.1、察看结果树：
            *分析查看某一个请求的详情；
                请求头，请求体；
                响应头，响应体；
            *在做性能场景的时候：
                分析错误请求的原因；
        1.2、聚合报告；
            汇总统计
                请求数、响应时间（平均的 90% 99% min max） 单位是ms
                错误率------越低越好
                吞吐量------越高越好
                发送/接收-----带宽
        1.3、用表格查看结果；

        1.4、图形结果；

    3、其他常用元件；
        3.1、前置处理器；
            *请求发出去之前执行的控制器；（元件）
                比如：加密md5；
        3.2、后置处理器；
            *请求发出去之后执行的控制器；（元件）
                比如：提取数据
        3.3、定时器；
            思考时间--固定定时器；----步骤1到步骤2之间需要停留时间
            同步定时器--集合点；----秒杀场景，同一时间用户高并发做相同的动作；
            随机定时器--
            吞吐量定时器
        3.4、断言；

四、脚本开发
    1、什么是jmeter脚本；
        通俗：用户操作被测软件系统某场景的动作流程；
        jmeter：用户操作被测软件系统某场景的请求；
    2、怎么快速开发漂亮的脚本；
        准确：最基本要求，脚本可以正常运行；
        快速：借助技术手动快速高效完成脚本开发；
        漂亮：脚本逻辑、维护性高；
    3、脚本开发方案；
        3.1、代理方案
            jmeter也有自己的代理，录制脚本前，我们只需要启动好代理，手动通过浏览器来控制，录制完毕停止代理；
            提示：
                1、直接保存jmx文件；
                2、需要人为调试脚本；
                3、录制https需要设置；

            操作步骤：
            3.1.1、设置浏览器的代理
            3.1.2、启动jmeter的代理服务器
            3.1.3、操作浏览器
            3.1.4、自动录制脚本，排除不需要的 图片，js，css等元素；

        3.2、fiddler方案：
            通过Fiddler是通过改写http代理，让数据从它那里通过，来监控并且截取到数据；
            在打开Fiddler的一瞬间，就已经设置好浏览器的代理了；
            当你关闭Fiddler的时候，浏览器的手动代理又自动关闭了，所以一般不用手动设置；

五、集合点技术：
    我们怎么实现真正的并发？
        并发：指的是系统中正在操作业务的用户，在jmeter中，称为线程数；
        jmeter中各个线程数（用户）在进行业务操作中的顺序存在一定的随机性。

    集合点的目的：
        让各个线程（用户）步调一致，对系统进行加压；
        达到模拟真实并发访问的效果；
    操作添加>定时器>Synchronizing Timer（同步定时器）

    参数设置：1、Number of Simulated Users to Group by (模拟用户组的数量)：
                a.每集合够多少个模拟用户（线程）后发送一次测试请求；（达到这个数值就发一次请求）
                b.如果设置为0，等同于设置为线程组中的线程数；（默认就是0，那么就是线程数是多少，就是多少用户发送请求）
                c.确保设置值不大于它所在线程组包含的用户数（线程数）--一直集结线程而不发出测试请求，直到超时（如果设置了的话）
                    --解释：如果线程数是5，而这个模拟用户组的数量是6，那么跑脚本的时候，这个接口永远也不会调用，因为打不到6个。

            2、Timeout in milliseconds --所有用户的集合超时；
                a.超时时间，即多少毫秒后同时释放已集结的线程，发送测试请求；
                b.设置为0，Timer将等待线程数达到了"Number of Simulated Users to Group"中设置
                  的值才释放；
                c.大于0，那么如果超过Timeout in milliseconds中设置的最大等待时间后还没达
                  到"Number of Simulated Users to Group"中设置的值，Timer将不再等待，释放已经到达的线程。

    参数设置注意事项：
        *如果设置Timeout in milliseconds = 0 ，且线程数量无法达到"Number of Simulated Users to Group"中设置的值，
        那么Test将无限等待，除非手动终止；
        *这个无法到达的情况有以下几种：
            a.设置的值大于线程数量，这样就无法达到了；
            b.最后一批线程数不够集合点数据；

六、接口测试：
    1、什么是接口测试：
        1.1、接口的概念：
            一种是内部接口；
                方法与方法之间的交互；
                模块与模块之间的交互；
            一种是调用对外包装的接口；
        1.2、web接口
            常用的接口方式：
                webService:
                    *是走soap协议通过http传输，请求报文和返回报文都是xml格式的。
                    *还需要解析麻烦，而且速度有可能降低；
                    *严格；
                Http：
                    *协议是超文本传输协议；
                    *Post请求方式
                        描述：提交数据给指定的服务器处理，可以向服务器发送修改请求。
                            修改服务器的数据需要借助测试工具；
                        特点：post请求不能被缓存；
                            post请求不会保存在浏览器浏览记录中；
                            以post请求的url无法保存为浏览器书签；
                            post请求没有长度限制，一般<80-100k
                            安全性相对较高；
                            效率相对较低；
                    *Get请求方式
                        描述：从指定的服务器中获取数据，直接在浏览器里输入就可以获取信息
                        特点：
                            get请求能够被缓存；
                            get请求会保存在浏览器的浏览记录中；
                            以get请求的url能够保存为浏览器书签；
                            get请求有长度限制；
                            get请求主要用以获取数据；
                            安全性相对较低；
                            效率相对较高；
                Https：
                    *并非是应用层的一种新协议，只是http通信接口部分用SSL和TLS协议代替而已；
        1.3、应用程序接口；
        1.4、数据库接口；
    2、为什么要做接口测试？
        项目需求：
            案例：一个登录接口，产品上规定用户名密码是6-10个字符数字下划线，前端页面做了校验，但是服务端没有做校验。
            风险：直接抓包去篡改你的接口，然后绕过校验，通过sql注入直接随意登录；
            危害：造成公司损失。
        市场需求：
            功能测试岗位；
            自动化测试岗位；
            性能测试岗位；
    3、使用Jmeter做接口测试；
        3.1、接口文档
            接口地址，返回格式，请求方式，请求参数，请求头，返回数据示例；
        3.2、Jmeter操作
            创建测试计划
            增加线程组---HTTP请求默认值（默认域名，后面的多个不同的请求就不用依次填写域名了）
                    ---仅一次控制器（当场景需要此请求只需要跑一次的时候，添加仅一次控制器）
                    ---仅一次控制器（当场景需要此请求只需要跑一次的时候，添加仅一次控制器）
                    ---响应断言（注意作用域，断言的作用域是在每一个请求维度的）
            http请求
            参数填入
            断言
            增加察看结果树
            运行
七、性能测试项目实战：
    7.1、性能项目场景提取与指标分析；
        *性能测试的概述；
            通过并发工具请求服务器，提前发现性能问题，优化并解决；

            实际工作中什么时候才需要做性能测试？
                第三方软件质检中心；
                项目需求：
                    1、常规需求；
                    2、用户反映性能问题；
                    3、对项目性能不放心；

        *性能指标分析；
            用户数；
            响应时间
            TPS
            错误率--越低越好
            服务器资源

            性能测试最终目的是：希望项目达到一个什么样的标准？
                多---可以支持更多的用户数访问；
                快---用户体验舒畅；
                好---访问都能成功，没有错误率；
                省---达到预期效果，尽可能节省资源；
        *项目性能场景提取；
            举例：一个商城的web页面；
            提取核心业务、高频业务；
                编号      功能模块            功能描述                        优先级
                TC-1    登录              用户通过用户名密码登录                 高
                TC-2    进入商城首页        用户进入商城首页                      高
                TC-3    商品搜索           用户进行宝贝搜索                      高
                TC-4    进入特价模块        用户进入特价商城                      高
                TC-5    查看商品详情        单机商品后进入商品详情页                高
                TC-6    添加购物车          用户对商品操作添加至购物车              高
                TC-7    添加商品收藏        用户对商品操作商品收藏                 高
                TC-8    查看购物车          用户操作查看购物车                    高
                TC-9    商品结算            用户对已选商品进行结算                 高
                TC-10   提交订单            用户提交商品订单                     高
                TC-11   查看我的全部订单      用户查看全部商品订单信息               高

        熟悉业务：
            高频业务；
            核心业务；
            扎堆场景；

        场景性能指标要求：
            订单场景操作流程：
                1、用户访问首页：登录--每个用户一次
                2、查看订单：点击订单管理；
            性能场景指标：
                *验证最大在线用户数；
                *错误率：<0.5%
                *请求相应时间 < 5s
                *场景运行10分钟（不加同步定时器）
                *服务器资源使用合理：
                    CPU使用率<80%
                    内存使用率<80%

        *jmeter工具介绍；
    7.2、性能场景之jmeter脚本优化实战；
    7.3、企业级Grafana性能监控分析；
    7.4、项目性能瓶颈分析与调优实战；
    https://www.bilibili.com/video/BV114411177e?p=10   --55:51



